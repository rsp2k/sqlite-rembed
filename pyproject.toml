[build-system]
requires = ["hatchling", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"

[project]
name = "sqlite-rembed"
version = "0.0.1a9"
description = "Generate text and image embeddings from remote APIs inside SQLite"
authors = [
    {name = "Alex Garcia", email = "alexsebastian.garcia@gmail.com"},
    {name = "Contributors"},
]
maintainers = [
    {name = "rsp2k"},
]
readme = "README.md"
license = "MIT OR Apache-2.0"
keywords = [
    "sqlite",
    "embeddings",
    "ai",
    "openai",
    "gemini",
    "anthropic",
    "ollama",
    "vector-search",
    "genai",
    "multimodal",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Rust",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.9"
dependencies = []

[project.urls]
Homepage = "https://github.com/asg017/sqlite-rembed"
Documentation = "https://github.com/asg017/sqlite-rembed/tree/main/docs"
Repository = "https://github.com/asg017/sqlite-rembed"
Issues = "https://github.com/asg017/sqlite-rembed/issues"
Changelog = "https://github.com/asg017/sqlite-rembed/releases"

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "build>=1.3.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build]
exclude = [
    "*.pyc",
    "__pycache__",
    "*.so.dSYM",
    "*.dylib.dSYM",
    ".git",
    ".github",
    ".pytest_cache",
    ".ruff_cache",
    ".mypy_cache",
    "build",
    "dist",
    "*.egg-info",
    "target/",
    "Cargo.lock",
    ".venv/",
    "uv.lock",
]

[tool.hatch.build.targets.wheel]
packages = ["bindings/python/sqlite_rembed"]
artifacts = [
    "bindings/python/sqlite_rembed/*.so",
    "bindings/python/sqlite_rembed/*.dylib",
    "bindings/python/sqlite_rembed/*.dll",
]

[tool.hatch.build.hooks.custom]
path = "hatch_build.py"

[tool.hatch.build.targets.sdist]
exclude = [
    "bindings/python/sqlite_rembed/*.so",
    "bindings/python/sqlite_rembed/*.dylib",
    "bindings/python/sqlite_rembed/*.dll",
]

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "ruff>=0.8.8",
    "mypy>=1.13.0",
    "build>=1.3.0",
    "wheel>=0.45.1",
    "twine>=6.1.0",
]

[tool.uv.sources]

[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "SIM102", # use a single if statement instead of nested if statements
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests", "bindings/python/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["bindings/python/sqlite_rembed"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
]